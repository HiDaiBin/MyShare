/// <summary>
/// JSON结果返回对象
/// </summary>
public class JsonNetResult : JsonResult
{
    /// <summary>
    /// 实例化JSON结果返回对象
    /// </summary>
    /// <param name="data">需要序列化的对象</param>
    /// <returns>JSON结果对象</returns>
    public JsonNetResult(object data)
        : this(data, JsonRequestBehavior.DenyGet)
    {
    }

    /// <summary>
    /// 实例化JSON结果返回对象
    /// </summary>
    /// <param name="data">需要序列化的对象</param>
    /// <param name="jsonRequestBehavior">设置是否允许GET请求获取JSON结果对象</param>
    /// <returns>JSON结果对象</returns>
    public JsonNetResult(object data, JsonRequestBehavior jsonRequestBehavior)
    {
        this.Data = data;
        this.JsonRequestBehavior = jsonRequestBehavior;
        this.Settings = new JsonSerializerSettings
        {
            ReferenceLoopHandling = ReferenceLoopHandling.Ignore, //忽略循环引用
            DateFormatString = "yyyy-MM-dd HH:mm:ss", //输出的日期格式
            ContractResolver = new CamelCasePropertyNamesContractResolver() //设置属性的名称为“驼峰命名法”
        };
    }

    /// <summary>
    /// JSON序列化设置对象
    /// </summary>
    public JsonSerializerSettings Settings { get; set; }

    /// <summary>
    /// 向响应流返回结果方法
    /// </summary>
    public override void ExecuteResult(ControllerContext context)
    {
        //判断当前请求是否为GET且判断是否允许GET获取JSON，不允许就报错
        if ("GET".Equals(context.HttpContext.Request.HttpMethod, StringComparison.OrdinalIgnoreCase) &&
            this.JsonRequestBehavior == JsonRequestBehavior.DenyGet)
            throw new Exception("不允许GET请求返回JSON数据！");

        //判断是否改变响应数据编码
        if (this.ContentEncoding != null)
            context.HttpContext.Response.ContentEncoding = this.ContentEncoding;
        //如果当前需要序列化的数据为NULL就直接返回
        if (this.Data == null)
            return;
        //设置响应数据内容格式为 json
        context.HttpContext.Response.ContentType =
            string.IsNullOrEmpty(this.ContentType) ? "application/json" : this.ContentType;
        //向响应流写入序列化的数据
        JsonSerializer.Create(Settings).Serialize(context.HttpContext.Response.Output, this.Data);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
使用新的 JsonResult 对象 方法一（推荐）
使用过滤器，将JsonResult对象替换成 JsonNetResult 对象
创建一个ActionFilter，用来将返回的JsonResult对象转换成新的JsonNetResult对象

/// <summary>
/// 将Action返回的JsonResult转换成JsonNetAction
/// </summary>
public class JsonNetActionFilter : IActionFilter
{
    public void OnActionExecuting(ActionExecutingContext filterContext)
    {
    }

    public void OnActionExecuted(ActionExecutedContext filterContext)
    {
        //判断是JsonResult对象
        if (filterContext.Result is JsonResult && !(filterContext.Result is JsonNetResult))
        {
            //得到原JsonResult对象
            var jsonResult = (JsonResult) filterContext.Result;
            //创建新的JsonNetResult对象
            var jsonNetResult = new JsonNetResult(jsonResult.Data)
            {
                ContentEncoding = jsonResult.ContentEncoding,
                ContentType = jsonResult.ContentType,
                JsonRequestBehavior = jsonResult.JsonRequestBehavior,
                MaxJsonLength = jsonResult.MaxJsonLength,
                RecursionLimit = jsonResult.RecursionLimit
            };
            //将新的JsonNetResult对象赋值给返回结果
            filterContext.Result = jsonNetResult;
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
在Global.asax注册过滤器

public class MvcApplication : HttpApplication
{
    protected void Application_Start()
    {
        AreaRegistration.RegisterAllAreas();
        RouteConfig.RegisterRoutes(RouteTable.Routes);

        //注册过滤器
        GlobalFilters.Filters.Add(new JsonNetActionFilter());
    }
}
1
2
3
4
5
6
7
8
9
10
11
使用

public class HomeController : Controller
{
    public ActionResult GetStudent()
    {
        var student = new StudentDto
        {
            Id = 1,
            Name = "张三",
            Age = 18,
            ClassName = "B36",
            CreateDate = DateTime.Now,
        };
        return Json(student);
    }
}